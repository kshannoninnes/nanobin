@page "/{Id}"
@inject PasteService PasteService
@inject IJSRuntime JsRuntime
@inject ILogger<ViewPaste> Logger
@implements IAsyncDisposable

@if (_paste == null)
{
    <div class="error">Paste not found</div>
}
else
{
    <div class="paste-container">
        <pre><code class="highlighted-code">@DecryptedContent</code></pre>
        <div class="paste-metadata">Created: @_paste.GetFormattedTimestamp()</div>
    </div>
}

@code {
    [Parameter]
    public required string Id { get; set; }

    private Paste? _paste;
    private IJSObjectReference? _javascript;
    private string _decryptedContent = string.Empty;

    private string DecryptedContent
    {
        get => _decryptedContent;
        set
        {
            _decryptedContent = value;
            StateHasChanged();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _paste = await PasteService.GetPasteAsync(Id);
        }
        catch (IOException e)
        {
            _paste = null;
            Logger.LogError(e, "Error retrieving paste {Id}", Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        if (_paste is null)
        {
            Logger.LogWarning("Paste was null, aborting render for ID {Id}", Id);
            return;
        }

        try
        {
            _javascript = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Pages/ViewPaste.razor.js");

            DecryptedContent = await _javascript.InvokeAsync<string>("decryptContent", _paste.Content);
            await _javascript.InvokeVoidAsync("highlightCode");
            await _javascript.InvokeVoidAsync("handlePasteSelection");
        }
        catch (JSException e)
        {
            Logger.LogError(e, "JavaScript interop error for paste {Id}", Id);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_javascript is not null)
        {
            await _javascript.DisposeAsync();
        }
    }
}
