@page "/{Id}"
@inject PasteService PasteService
@inject IJSRuntime JsRuntime
@inject ILogger<ViewPaste> Logger
@using Nanobin.Exceptions
@implements IAsyncDisposable

@if (_errorMessage is not null)
{
    <div class="error">@_errorMessage</div>
}
else
{
    <pre><code id="decrypted-content"></code></pre>
    <div class="paste-metadata">Created: @_paste!.GetFormattedTimestamp()</div>
}

@code {
    [Parameter]
    public required string Id { get; set; }

    private Paste? _paste;
    private string? _errorMessage;
    private IJSObjectReference? _javascript;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _paste = await PasteService.GetPasteAsync(Id);
        }
        catch (PasteNotFoundException e)
        {
            Logger.LogInformation("{Message}", e.Message);
            _errorMessage = "Paste not found";
        }
        catch (IOException e)
        {
            Logger.LogError(e, "Database error occurred while retrieving paste with ID: {PasteId}", Id);
            _errorMessage = "Error retrieving paste";
        }
        catch(Exception e)
        {
            Logger.LogError(e, "Unexpected error occurred while retrieving paste with ID: {PasteId}", Id);
            _errorMessage = "Unexpected server error retrieving paste";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        if(_errorMessage is not null)
        {
            return;
        }

        try
        {
            _javascript = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Pages/ViewPaste.razor.js");
            
            await DisplayContentAsync();
            await HighlightSyntaxAsync();
        }
        catch (JSException e)
        {
            Logger.LogError(e, "JavaScript interop error for paste {Id}", Id);
            _errorMessage = "JavaScript error loading paste content";
        }
    }
    
    private async Task DisplayContentAsync()
    {
        try
        {
            await _javascript!.InvokeVoidAsync("displayContent", _paste!.Content);
        }
        catch (JSException e)
        {
            Logger.LogError(e, "Error displaying paste content for {Id}", Id);
            _errorMessage = "Error displaying paste content";
        }
    }
    
    private async Task HighlightSyntaxAsync()
    {
        try
        {
            await _javascript!.InvokeVoidAsync("applySyntaxHighlighting");
        }
        catch (JSException e)
        {
            Logger.LogWarning(e, "Syntax highlighting failed for paste {Id}", Id);
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_javascript is not null)
        {
            await _javascript.DisposeAsync();
        }
    }
}
